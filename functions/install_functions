#!/bin/bash

# Install preferred apps
function install_favs {
	# Update the list of packages in 'data/favs.list' to suit your preferences
	install_from_list favs "preferred applications" main
}

# Install preferred development tools
function install_favs_dev {
	# Update the list of packages in 'data/favs-dev.list' to suit your preferences
	install_from_list favs-dev "preferred development tools" main
}

# Install preferred utilities
function install_favs_utils {
	# Update the list of packages in 'data/favs-utils.list' to suit your preferences
	install_from_list favs-utils "preferred utilities" main
}

# Install preferred GNOME apps
function install_codecs {
	# Update the list of packages in 'data/codecs.list' to suit your preferences
	install_from_list codecs "multimedia Codes" main
}

# Install from list
function install_from_list() {
	# echo_message header "Starting 'install_from_list' function..."
	echo_message title "Starting installation of ${2}..."
	# Variables
	LIST=$(dirname "$0")'/data/'${1}'.list'
	# Draw window
	if (eval `resize` && whiptail \
		--title "Install ${2^}" \
		--yesno "Current list of packages that will be installed: \n\n$(cat ${LIST}) \n\nWould you like to proceed?" \
		$LINES $COLUMNS $(( $LINES - 12 )) \
		--scrolltext \
		3>&1 1>&2 2>&3) then
		# Install loop
		for PACKAGE in $(cat $LIST); do
			# Check if package is installed
			if [ $(check_packages $PACKAGE; echo $?) = 1 ]; then
				# Install package
				echo_message warning "Package '$PACKAGE' is not installed. Installing..."
				# Admin privileges
				elevate_privilege "apt install -y $PACKAGE"
				# Check if failed
				if [[ $? != 0 ]]; then
					echo_message error "Error installing '$PACKAGE'."
				fi
			else
				# Show already installed message
				echo_message info "Package '$PACKAGE' is installed."
			fi
		done
		# Finished
		echo_message success "Installation of ${2} complete."
		whiptail --title "Finished" --msgbox "Installation of ${2} is complete." 8 56
		$3
	else
		# Cancelled
		echo_message info "Installation of ${2} cancelled."
		$3
	fi
}

# Install single package
function install_package() {
	echo_message header "Starting 'install_package' function..."
	# Check if already installed
	dpkg-query -W --showformat='${Status}\n' $2 | grep "install ok installed"  &> /dev/null
	# If package is not installed
	if [ $? = 1 ]; then
		echo_message info "${1} is not installed. Installing..."
		if (whiptail --title "Install ${1}" --yesno "Are you sure you want to proceed with installation?" 8 64) then
			# Install
			echo_message info "Installing '${2}'..."
			# Admin privileges
			elevate_privilege "apt install -y ${2}"
			# Finished
			echo_message success "Installation of package '${2}' is complete."
			whiptail --title "Finished" --msgbox "Installation of ${1} complete." 8 64
			# return
			$3
		else
			# Cancelled
			echo_message info "Installation of ${1} cancelled."
			# return
			$3
		fi
	else
		# Already installed
		echo_message info "Package '${2}' is installed."
		whiptail --title "Finished" --msgbox "Installation of ${1} is complete." 8 64
		# return
		$3
	fi
}

# Install single remote package
function install_remote_package() {
	echo_message header "Starting 'install_remote_package' function..."
	# Check if package is installed
	dpkg-query -W --showformat='${Status}\n' $2 | grep "install ok installed"  &> /dev/null
	# If package is not installed
	if [ $? = 1 ]; then
		echo_message info "$1 is not installed."
		# Download Debian file that matches system architecture
		case `uname -i` in
			i386|i486|i586|i686)
				# Download 32 bit package
				echo_message info "Downloading remote package '${2}_i386.deb' from '$3'..."
				curl -O ${3}/${2}_i386.deb
				;;
			x86_64)
				# Download 64 bit package
				echo_message info "Downloading remote package '${2}_amd64.deb' from '$3'..."
				curl -O ${3}/${2}_amd64.deb
				;;
			*)
				whiptail --title "Error." --msgbox "No remote packages available to download." 8 64
				$4
				;;
		esac
		# Install package(s)
		echo_message info "Installing '$2' package..."
		elevate_privilege "dpkg -i $2*.deb"
		# Install depencies, if any
		echo_message info "Correcting any dependency errors..."
		elevate_privilege "apt install -fy"
		# Cleanup and finish
		rm $2*.deb
		# Done
		echo_message success "Installation of $1 complete."
		whiptail --title "Finished" --msgbox "Installation of $1 complete." 8 64
		$4
	else
		# Already installed
		echo_message info "$1 already installed."
		whiptail --title "Finished" --msgbox "$1 is already installed." 8 64
		$4
	fi
}


# Install flatpak package
function install_flatpak_package() {
	# echo_message header "Starting 'install_flatpak_package' function..."
	# If package is not installed
	flatpak list | grep $3 &> /dev/null
	if [ $? = 1 ]; then
		echo_message info "${1} is not installed. Installing..."
		if (whiptail \
			--title "Install ${1}" \
			--yesno "The ${1} Flatpak package is not installed. \n\nProceed with installation of '${3}'?" 10 64) then
			# Install
			echo_message info "Installing flatpak '${3}'..."
			flatpak install -y ${2} ${3}
			# Finished
			echo_message success "$1 is installation complete."
			whiptail --title "Finished" --msgbox "Installation of ${1} Flatpak complete." 8 64
			$4
		else
			# Cancelled
			echo_message info "Installation of ${1} cancelled."
			$4
		fi
	else
		# Already installed
		echo_message info "${3} is already installed."
		whiptail --title "Installed" --msgbox "The Flatpak for ${1} is already installed." 8 64
		$4
	fi
}

# Install snap package
function install_snap_package() {
	# echo_message header "Starting 'install_snap_package' function..."
	# If package is not installed
	snap list | grep $1 &> /dev/null
	if [ $? = 1 ]; then
		echo_message info "${1} is not installed. Installing..."
		if (whiptail \
			--title "Install ${1^}" \
			--yesno "The Snap package for ${1^} is not installed. \n\nProceed with installation of '${1}'?" 10 64) then
			# Install
			echo_message info "Installing snap '${1}'..."
			# Admin privileges
			elevate_privilege "snap install ${1}"
			# Finished
			echo_message success "'${1}' is installation complete."
			whiptail --title "Finished" --msgbox "Installation of ${1^} Snap complete." 8 64
			$3
		else
			# Cancelled
			echo_message info "Installation of ${1^} cancelled."
			$3
		fi
	else
		# Already installed
		echo_message info "${1} is already installed."
		whiptail --title "Installed" --msgbox "The Snap for ${1^} is already installed." 8 64
		$3
	fi
}