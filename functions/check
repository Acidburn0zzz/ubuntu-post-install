#!/bin/bash

# Check if command failed, if true abort
function check_fail {
	EXITSTATUS=$1
	if [[ $EXITSTATUS != 0 ]]; then
		show_error "Last command returned an error; something may have went wrong."
		show_error "Aborting..." && sleep 3 && exit 99
	fi
}

# Check for and install required packages for this script set.
function check_dependencies {
	# Check list
	DEPS=$(dirname "$0")'/data/dependencies.list'
	for package in $(cat $DEPS); do 
	PKGCHECK=$(dpkg-query -W --showformat='${Status}\n' $package|grep "install ok installed")
	if [ "" == "$PKGCHECK" ]; then
		show_info $NAME 'is not installed. Proceeding'
		show_info "This script requires '$package' and it is not present on your system."
		show_question 'Would you like to install it to continue? (Y)es, (N)o : ' && read REPLY
		echo
		case $REPLY in
		# Positive action
		[Yy]* ) 
			show_warning 'Requires root privileges'
			$SUDOCMD apt -y install $package
			show_success "Package '$package' installed. Proceeding."
			;;
		# Negative action
		[Nn]* )
			show_info "Exiting..."
			sleep 2 && exit 99
			;;
		# Error
		* )
			show_error '\aSorry, try again.' && check
			;;
		esac
	else
		show_success "Dependency '$package' is installed."
	fi
	done
	echo "Proceeding."
}

# Check which distribution the user is running
function check_distribution {
	EXITSTATUS=$(which lsb_release &>/dev/null; echo $?)
	if [[ $EXITSTATUS != 0 ]]; then
		show_error "\aCan't check which distribution you are using! Aborting."
		show_error " Aborting..." && sleep 3 && exit 99
	else
		if lsb_release -ds | grep -qE '(Ubuntu|Mint|elementary)'; then
			echo 'Your distribution is: '$(lsb_release -ds)
			show_info "You appear to be using Ubuntu or an Ubuntu-based distro."
			echo "Proceeding."
		elif lsb_release -ds | grep -q 'Debian'; then
			echo 'Your distribution is: '$(lsb_release -ds)
			show_warning "You appear to be using Debian; some functions may require tweaking."
			echo "Proceeding nonetheless."
		else
			show_error "\aYou appear to be using a distribution which is not compatible with this script! Proceeding might break the system."
			show_error " Aborting..." && sleep 3 && exit 99
		fi
	fi
}

# Check if current user is in the sudo group
function check_sudo {
	if [[ $EUID != 0 ]]; then
		EXITSTATUS=$(groups $USER | grep -q 'sudo'; echo $?)
		if [[ $EXITSTATUS != 0 ]]; then
			show_error "Your user account doesn't have authorization to use these scripts with this computer. Log in as root or as a user with admin privileges."
			show_info "Exiting..."
			sleep 5 && exit 99
		fi
		# Current user can use 'sudo'
		show_info "Current user has sudo privileges"
		echo "Proceeding."
		SUDOCMD="sudo"
	else
		show_info "You are logged in as the root user"
		echo "Proceeding."
		SUDOCMD=
		sleep 2
	fi
}

function check {
	# Check sudo
	show_warning "Checking user privileges..."
	check_sudo
	# Check distro
	show_warning "Checking distribution..."
	check_distribution
	# Check dependencies
	show_warning "Checking dependencies..."
	check_dependencies
}